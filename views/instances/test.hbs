<script src="/javascripts/lib/three.js" type="text/javascript"></script>
<script src="/javascripts/lib/stats.js" type="text/javascript"></script>
<script src="/javascripts/lib/input.js" type="text/javascript"></script>

<script type="text/javascript" src="/javascripts/lib/physijs/stats.js"></script>
<script type="text/javascript" src="/javascripts/lib/physijs/physi.js"></script>

<script src='/assets/map.js'></script>

<script>

    var physics = false


    Physijs.scripts.worker = '/javascripts/lib/physijs/physijs_worker.js';
    Physijs.scripts.ammo = '/javascripts/lib/physijs/ammo.js';

    var INPUT_U = function() { return input.keyboard[87] || input.keyboard[38] ? true:false }
    var INPUT_L = function() { return input.keyboard[65] || input.keyboard[37] ? true:false}
    var INPUT_D = function() { return input.keyboard[83] || input.keyboard[40] ? true:false }
    var INPUT_R = function() { return input.keyboard[68] || input.keyboard[39] ? true:false }

    var container, stats;
    var camera, scene, renderer;
    var geometry, group;
    var x = 0, y = 0
    var mouseX = 0, mouseY = 0;
    var windowHalfX = window.innerWidth / 2;
    var windowHalfY = window.innerHeight / 2;
    var light;

    document.addEventListener( 'mousemove', onDocumentMouseMove, false );

    init();
    animate();

    function Player(x,y) {

        var geometry = new THREE.CubeGeometry( 16, 16, 16 );
        var texture = THREE.ImageUtils.loadTexture( '/assets/images/fed.png' );
        var material = Physijs.createMaterial(new THREE.MeshLambertMaterial( { map: texture }),.6,.3 );

        var mesh = physics ? new Physijs.BoxMesh( geometry, material,0 ) : new THREE.Mesh( geometry, material);

        return mesh;
    }

    function init() {

          container = document.createElement( 'div' );
          document.body.appendChild( container );

          camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 10000 );
          camera.position.z = 300;

          scene = physics ? new Physijs.Scene() : new THREE.Scene();
          if(physics) scene.setGravity(new THREE.Vector3( 0, -30, 0 ));

          scene.fog = new THREE.Fog( 0xffffff, 1, 10000 );

          var geometry = new THREE.CubeGeometry( 16, 16, 16 );
          var texture = THREE.ImageUtils.loadTexture( '/assets/images/rock.png' );
          var material = new THREE.MeshLambertMaterial( { map: texture },.6,.3 );

          group = new THREE.Object3D();

          for(var y=0;y<map.data.length;y++) {
              var row = map.data[y].split('');
              for(var x=0;x<map.data[0].length;x++) {

                  var tile = map.data[y][x];

                  if(tile=='0') {


                        mesh = physics ? new Physijs.BoxMesh(geometry, material) : new THREE.Mesh( geometry, material );
                        mesh.position.x = x * 16;
                        mesh.position.y = y*-16;
                        mesh.position.z = 10;

                        mesh.matrixAutoUpdate = false;
                        mesh.updateMatrix();

                        group.add( mesh );

                  }
              }
          }
          scene.add(group);

          group.castShadow = true
          group.receiveShadow = true


          light = new THREE.PointLight(0xffffff,1,-10);
          light.position.z = 300;

          scene.add( light );



          me = new Player();
          me.position.x = 100
          me.position.y = -100

          scene.add(me)

          renderer = new THREE.WebGLRenderer();
          renderer.setSize( window.innerWidth, window.innerHeight );
          renderer.sortObjects = false;

          container.appendChild( renderer.domElement );

          stats = new Stats();
          stats.domElement.style.position = 'absolute';
          stats.domElement.style.top = '0px';
          stats.domElement.style.zIndex = 100;
          container.appendChild( stats.domElement );

          window.addEventListener( 'resize', onWindowResize, false );

    }

    function onWindowResize() {

      windowHalfX = window.innerWidth / 2;
      windowHalfY = window.innerHeight / 2;

      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();

      renderer.setSize( window.innerWidth, window.innerHeight );

    }

    function onDocumentMouseMove(event) {

      mouseX = ( event.clientX - windowHalfX ) * 10;
      mouseY = ( event.clientY - windowHalfY ) * 10;

    }

    function animate() {

      requestAnimationFrame( animate );

      render();
      stats.update();

    }

    function render() {

      if(INPUT_U()) { y-=4 }
      if(INPUT_L()) { x-=4 }
      if(INPUT_D()) { y+=4 }
      if(INPUT_R()) { x+=4 }

      camera.position.x = x
      camera.position.y = y*-1

      me.position.x = x;
      me.position.y = y*-1

      light.position.x = x;
      light.position.y = y*-1;
      // camera.position.z = mouseY

      var deltaX = (input.mouse.x || 0) - windowHalfX
      var deltaY = (input.mouse.y || 0) - windowHalfY
      me.rotation.z = Math.atan2(deltaY, deltaX*-1) - 1.5//  Math.PI

      // if(physics) scene.simulate( undefined, 1 );

      renderer.render( scene, camera );



    }



    function spawnBox(x,y,z) {
        var box, material;
        var box_geometry = new THREE.CubeGeometry( 16, 16, 16 )
        var handleCollision = function() {}
        material = Physijs.createMaterial(new THREE.MeshLambertMaterial({ map: THREE.ImageUtils.loadTexture( '/assets/images/plywood.jpg' ) }), .6,.3);
        material.map.wrapS = material.map.wrapT = THREE.RepeatWrapping;
        material.map.repeat.set( .5, .5 );

        box = new Physijs.BoxMesh(box_geometry, material);
        box.collisions = 0;

        box.position.set(
          x || 100,
          y || -100,
          z || 0
        );

        box.rotation.set(
          Math.random() * Math.PI,
          Math.random() * Math.PI,
          Math.random() * Math.PI
        );

        box.castShadow = true;
        box.addEventListener( 'collision', handleCollision );
        // box.addEventListener( 'ready', spawnBox );
        scene.add( box );
    }

</script>