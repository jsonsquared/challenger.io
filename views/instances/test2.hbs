<script src="/javascripts/lib/three.js" type="text/javascript"></script>
<script src="/javascripts/lib/stats.js" type="text/javascript"></script>
<script src="/javascripts/lib/input.js" type="text/javascript"></script>

<script type="text/javascript" src="/javascripts/lib/physijs/stats.js"></script>
<script type="text/javascript" src="/javascripts/lib/physijs/physi.js"></script>

<script src='/assets/map.js'></script>
<style>
    canvas {
/*        opacity:.1;*/
    }
</style>

<script>

    var TILE_SIZE = 16;
    var physics = true


    Physijs.scripts.worker = '/javascripts/lib/physijs/physijs_worker.js';
    Physijs.scripts.ammo = '/javascripts/lib/physijs/ammo.js';

    var INPUT_U = function() { return input.keyboard[87] || input.keyboard[38] ? true:false }
    var INPUT_L = function() { return input.keyboard[65] || input.keyboard[37] ? true:false}
    var INPUT_D = function() { return input.keyboard[83] || input.keyboard[40] ? true:false }
    var INPUT_R = function() { return input.keyboard[68] || input.keyboard[39] ? true:false }

    var container, stats;
    var camera, scene, renderer;
    var geometry, group;
    var x = 100, y = 200
    var mouseX = 0, mouseY = 0;
    var windowWidth = window.innerWidth / 4;
    var windowHeight = window.innerHeight / 4;
    var windowHalfX = windowWidth / 2;
    var windowHalfY = windowHeight / 2;
    var light;

    document.addEventListener( 'mousemove', onDocumentMouseMove, false );

    init();
    animate();

    function range(from,to) {
       return Math.floor(Math.random() * (to - from + 1) + from);
    }


    function Player(x,y) {

        var geometry = new THREE.CubeGeometry( 16, 16, 16 );
        var texture = THREE.ImageUtils.loadTexture( '/assets/images/fed.png' );
        var material = Physijs.createMaterial(new THREE.MeshLambertMaterial( { map: texture }),.6,0 );

        var mesh = physics ? new Physijs.BoxMesh( geometry, material,.5 ) : new THREE.Mesh( geometry, material);
        mesh.position.z = 11
        return mesh;
    }

    function init() {

          container = document.createElement( 'div' );
          document.body.appendChild( container );

          // create the camera
          camera = new THREE.PerspectiveCamera( 60, windowWidth / windowHeight, 1, 10000 );
          camera.position.z = 164;

          // create the scene
          if(physics) {
              scene = new Physijs.Scene();
              scene.setGravity(new THREE.Vector3( 0, 0, -300 ));
          } else {
              scene = new THREE.Scene();
          }
          scene.fog = new THREE.Fog( 0xffffff, 1, 10000 );

          // generate and add the map
          mapObject = generateMap()
          scene.add(mapObject);

          // create a light
          light = new THREE.PointLight(0xffffff,1,-10);
          light.position.z = 300;
          scene.add( light );

          // create the local players avatar
          me = new Player();
          me.position.x = 100
          me.position.y = -100
          scene.add(me)



          // create the renderer
          renderer = new THREE.WebGLRenderer();
          renderer.setSize( windowWidth, windowHeight );
          renderer.sortObjects = false;

          // append the renderer to the page
          container.appendChild( renderer.domElement );

          // FPS stats
          stats = new Stats();
          stats.domElement.style.position = 'absolute';
          stats.domElement.style.top = '0px';
          stats.domElement.style.zIndex = 100;
          container.appendChild( stats.domElement );

    }

    function onDocumentMouseMove(event) {

      mouseX = ( event.clientX - windowHalfX ) * 10;
      mouseY = ( event.clientY - windowHalfY ) * 10;

    }

    function animate() {

      requestAnimationFrame( animate );

      render();
      stats.update();

    }

    function render() {

      if(INPUT_U()) { y-=4 }
      if(INPUT_L()) { x-=4 }
      if(INPUT_D()) { y+=4 }
      if(INPUT_R()) { x+=4 }

      camera.position.x = x
      camera.position.y = y*-1

      me.position.x = x;
      me.position.y = y*-1

      light.position.x = x;
      light.position.y = y*-1;
      // camera.position.z = mouseY

      var deltaX = (input.mouse.x || 0) - windowHalfX
      var deltaY = (input.mouse.y || 0) - windowHalfY
      me.rotation.z = Math.atan2(deltaY, deltaX*-1) - 1.5

      if(physics) scene.simulate( undefined, 5 );

      renderer.render( scene, camera );
    }

    function generateMap() {

        // create a container
        var geometry = new THREE.CubeGeometry(0,0,0);
        var material = Physijs.createMaterial(new THREE.MeshLambertMaterial(),.8,.4);
        var mapGroup = new Physijs.BoxMesh(geometry, material,0)

        // add the floor
        var geometry = new THREE.CubeGeometry( map.data[0].length * TILE_SIZE, map.data.length * TILE_SIZE, 16 );
        var texture = THREE.ImageUtils.loadTexture( '/assets/images/rocks.jpg' );
        var material = Physijs.createMaterial(new THREE.MeshLambertMaterial( { map: texture }),.8,.4);
        var floor = physics ? new Physijs.BoxMesh(geometry, material,0) : new THREE.Mesh( geometry, material );
        floor.position.x=map.data[0].length * TILE_SIZE / 2
        floor.position.y=map.data.length * TILE_SIZE / 2 * -1
        floor.position.z = 9;
        mapGroup.add( floor );


        var geometry = new THREE.CubeGeometry( 16, 16, 64 );
        var texture = THREE.ImageUtils.loadTexture( '/assets/images/plywood.jpg' );
        var material = Physijs.createMaterial(new THREE.MeshLambertMaterial( { map: texture }),.8,.4);

        for(var y=0;y<map.data.length;y++) {
            var row = map.data[y].split('');
            for(var x=0;x<map.data[0].length;x++) {

                var tile = map.data[y][x];

                if(tile=='0') {
                      var mesh = physics ? new Physijs.BoxMesh(geometry, material) : new THREE.Mesh( geometry, material );
                      mesh.position.x = x * 16;
                      mesh.position.y = y*-16;
                      mesh.position.z = 10;

                      mesh.matrixAutoUpdate = false;
                      mesh.updateMatrix();

                      mapGroup.add( mesh );
                }
            }
        }

        return mapGroup

    }

    function spawnBall(x,y,z) {
        var box, material;
        var box_geometry = new THREE.SphereGeometry( 16, 32,32 );//THREE.CubeGeometry( 16, 16, 16 )
        var handleCollision = function() {}
        material = Physijs.createMaterial(new THREE.MeshLambertMaterial({ map: THREE.ImageUtils.loadTexture( '/assets/images/plywood.jpg' ) }), .6,.5);
        material.map.wrapS = material.map.wrapT = THREE.RepeatWrapping;
        material.map.repeat.set( .5, .5 );

        box = new Physijs.SphereMesh(box_geometry, material,.2);
        box.collisions = 0;

        box.position.set(
          x || 100,
          y || -100,
          z || 100
        );

        box.rotation.set(
          Math.random() * Math.PI,
          Math.random() * Math.PI,
          Math.random() * Math.PI
        );

        box.castShadow = true;
        box.addEventListener( 'collision', handleCollision );
        scene.add( box );

        scene.addEventListener('update',function() {
            box.applyCentralImpulse(new THREE.Vector3(0, -.5, 0));
        })

        // setTimeout(function(b) {
        //     scene.remove(b)
        // },2000,box)
    }

</script>