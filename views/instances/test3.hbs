<script src="/javascripts/lib/three.js" type="text/javascript"></script>
<script src="/javascripts/lib/input.js" type="text/javascript"></script>
<script src="/javascripts/lib/easeljs.min.js" type="text/javascript"></script>

<script src="/javascripts/lib/tweenjs.min.js" type="text/javascript"></script>
<script src='/javascripts/mapUtils.js'></script>
<script src='/assets/map.js'></script>

<script type="text/javascript" src="/javascripts/lib/physijs/stats.js"></script>
<script type="text/javascript" src="/javascripts/lib/physijs/physi.js"></script>

<div id='container'></div>
<script>

// 'use strict';

  Physijs.scripts.worker = '/javascripts/lib/physijs/physijs_worker.js';
  Physijs.scripts.ammo = '/javascripts/lib/physijs/ammo.js';


    var TILE_SIZE = 16;
    var WIDTH = 640;
    var HEIGHT = 480;
    var OFFSET = 1.5;

    var x=0;
    var y=0;

    var VIEW_ANGLE = 30;
    var ASPECT = WIDTH / HEIGHT;
    var NEAR = 0.1;
    var FAR = 10000;
    var sphere;
    var pointLight;
    var camera;
    var spotLight;
    var directionalLight;
    var me;
    var crosshair;

    INPUT_U = function() { return input.keyboard[87] || input.keyboard[38] ? true:false }
    INPUT_L = function() { return input.keyboard[65] || input.keyboard[37] ? true:false}
    INPUT_D = function() { return input.keyboard[83] || input.keyboard[40] ? true:false }
    INPUT_R = function() { return input.keyboard[68] || input.keyboard[39] ? true:false }

    $(function() {

        setupScene();

        parse();

        // setInterval(handleInput,15)

        // setInterval(render,20)

      render = function() {
          handleInput()
        requestAnimationFrame( render );
        renderer.render( scene, camera );
        // render_stats.update();
      };

      render()

    })

    function handleInput() {
        if(INPUT_U()) { y-=1 }
        if(INPUT_L()) { x-=1 }
        if(INPUT_D()) { y+=1 }
        if(INPUT_R()) { x+=1 }
        createjs.Tween.removeTweens(camera.position)
        // createjs.Tween.removeTweens(me.position)

        createjs.Tween.get(camera.position).to({x:x,y:y*-1},20);
        // createjs.Tween.get(me.position).to({x:x,y:y*-1},20);

        // camera.position.x = x
        // camera.position.y = y*-1
        //
        // me.position.x = x
        // me.position.y = y*-1

        var deltaX = (input.mouse.x || 0) - WIDTH / 2
        var deltaY = (input.mouse.y || 0) - HEIGHT / 2
        me.rotation.z = Math.atan2(deltaY, deltaX*-1) - OFFSET//  Math.PI
    }

    // function render() {
    //
    //     // scene.simulate();
    //
    //     renderer.render(scene, camera);
    // };



    function Tile(x,y) {

        var box, material;
        var box_geometry = new THREE.CubeGeometry( 16, 16, 32 )
        // var handleCollision = function() {}
        material = Physijs.createMaterial(new THREE.MeshLambertMaterial({ map: THREE.ImageUtils.loadTexture( '/assets/images/plywood.jpg' ) }), .6,.3);
        material.map.wrapS = material.map.wrapT = THREE.RepeatWrapping;
        material.map.repeat.set( .5, .5 );
        // material = Physijs.createMaterial(new THREE.MeshLambertMaterial({color: 0xFFFFFF}),.8,.3)

        box = new Physijs.BoxMesh(box_geometry, material);
        box.collisions = 0;

        box.position.set(x + (TILE_SIZE/2),(y + (TILE_SIZE/2))*-1,0);

        return box;

        // shapeMaterial = new THREE.MeshLambertMaterial({color: 0xFFFFFF});
        // geometry = new THREE.CubeGeometry(16, 16, 32, 1, 1, 1)
        //
        // var shape = new THREE.Mesh(geometry, shapeMaterial);
        // shape.position.x = x + (TILE_SIZE/2);
        // shape.position.y = (y + (TILE_SIZE/2))*-1;
        // shape.position.z = 1;
        // shape.castShadow = true
        // shape.receiveShadow = true
        //
        // return shape;
    }

    function Player(x,y) {

        var box, material;
        var box_geometry = new THREE.CubeGeometry( 16, 16, 1 )
        // var handleCollision = function() {}
        material = Physijs.createMaterial(new THREE.MeshLambertMaterial({ map: THREE.ImageUtils.loadTexture( '/assets/images/fed.png' ) }), .6,.3);
        material.map.wrapS = material.map.wrapT = THREE.RepeatWrapping;
        material.map.repeat.set( 1, 1 );
        // material = Physijs.createMaterial(new THREE.MeshLambertMaterial({color: 0xFFFFFF}),.8,.3)

        box = new Physijs.BoxMesh(box_geometry, material);
        box.collisions = 0;

        box.position.set(x + (TILE_SIZE/2),(y + (TILE_SIZE/2))*-1,16);

        return box;
    }

    function parse() {

        // var combined = new THREE.Geometry();
        group = new THREE.Object3D();

        var combined = new Physijs.PlaneMesh(
            new THREE.PlaneGeometry(1, 1),
            new THREE.MeshBasicMaterial({color: 0x000000})
          );

        for(var y=0;y<map.data.length;y++) {
            var row = map.data[y].split('');
            for(var x=0;x<map.data[0].length;x++) {

                var tile = map.data[y][x];

                if(tile=='0') {
                    group.add(new Tile(x*TILE_SIZE,y*TILE_SIZE,'#333'))
                    // THREE.GeometryUtils.merge( combined, new Tile(x*TILE_SIZE,y*TILE_SIZE,'#333') );

                    // scene.add(new Tile(x*TILE_SIZE,y*TILE_SIZE,'#333'))
                }
            }
        }

        // var mesh = new THREE.Mesh( combined, new THREE.MeshLambertMaterial( { color: 0xffffff } ) );
        // var mesh = new Physijs.BoxMesh(combined, new THREE.MeshLambertMaterial( { color: 0xffffff } ),0)
        // mesh.castShadow = true;
        // mesh.receiveShadow = true;

        scene.add( combined );

    }

    function Floor(w,h) {

        // floor = new THREE.Mesh(new THREE.CubeGeometry(w, h, 10, 10, 0, 10), floorMaterial);
        // floor.position.set(w/2,h*-.5,0)
        // floor.receiveShadow = true
        // scene.add(floor)

        ground_material = Physijs.createMaterial(
            new THREE.MeshLambertMaterial({ map: THREE.ImageUtils.loadTexture( '/assets/images/rocks.jpg' ) }),
            .8, // high friction
            .3 // low restitution
        );
        ground_material.map.wrapS = ground_material.map.wrapT = THREE.RepeatWrapping;
        ground_material.map.repeat.set( 3, 3 );

        ground = new Physijs.BoxMesh(
            new THREE.CubeGeometry(w, h, 1),
            ground_material,
            0 // mass
        );
        ground.position.set(w/2, h/2*-1,0)
        ground.receiveShadow = true;
        scene.add( ground );

        return this;
    }

    function spawnBox(x,y,z) {
        var box, material;
        var box_geometry = new THREE.CubeGeometry( 16, 16, 16 )
        var handleCollision = function() {}
        material = Physijs.createMaterial(new THREE.MeshLambertMaterial({ map: THREE.ImageUtils.loadTexture( '/assets/images/plywood.jpg' ) }), .6,.3);
        material.map.wrapS = material.map.wrapT = THREE.RepeatWrapping;
        material.map.repeat.set( .5, .5 );

        box = new Physijs.BoxMesh(box_geometry, material);
        box.collisions = 0;

        box.position.set(
          x || 100,
          y || -100,
          z || 0
        );

        box.rotation.set(
          Math.random() * Math.PI,
          Math.random() * Math.PI,
          Math.random() * Math.PI
        );

        box.castShadow = true;
        box.addEventListener( 'collision', handleCollision );
        // box.addEventListener( 'ready', spawnBox );
        scene.add( box );
    }

    function setupScene() {
        $container = $('#container');

        // and a scene
        renderer = new THREE.WebGLRenderer();
        camera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR,FAR);
        camera.position.z = 300;

        // scene = new THREE.Scene();
        scene = new Physijs.Scene;
        scene.setGravity(new THREE.Vector3( 0, 0, -500));
        // scene.addEventListener(
        //   'update',
        //   function() {
        //     scene.simulate( undefined, 1 );
        //     // physics_stats.update();
        //   }
        // );

        // add the camera to the scene
        scene.add(camera);

        // start the renderer
        renderer.setSize(WIDTH, HEIGHT);

        // attach the render-supplied DOM element
        $container.append(renderer.domElement);

        pointLight = new THREE.PointLight(0xffffff,1,0);
        pointLight.position.z = 1000;
        scene.add(pointLight);

        // floorMaterial = new THREE.MeshLambertMaterial({color: 0xFF0000});
        // var w = map.data[0].length * TILE_SIZE
        // var h = map.data.length * TILE_SIZE

        floor = new Floor(map.data[0].length * TILE_SIZE,map.data.length * TILE_SIZE);

        me = new Player();//new Tile(100,-100,10)
        // me = new THREE.Mesh(new THREE.CubeGeometry(16, 16, 16, 1, 1, 1), new THREE.MeshLambertMaterial({color: 0x666666}));
        scene.add(me)

        // crosshair = new THREE.Mesh(new THREE.CubeGeometry(8, 8, 16, 1, 1, 1), new THREE.MeshLambertMaterial({color: 0xBB00BB}));
        // crosshair.position.z = 10
        // scene.add(crosshair)

        object = new THREE.AxisHelper( 100 );
        object.position.set( -20, 0, 0 );
        scene.add( object );

    }
</script>
