<!-- <script src="/javascripts/lib/easeljs.min.js" type="text/javascript"></script>
<script src="/javascripts/lib/tweenjs.min.js" type="text/javascript"></script>
<script src="/javascripts/lib/illuminated.js" type="text/javascript"></script>
<script src='/javascripts/preload.js'></script>
<script src="/javascripts/lib/input.js" type="text/javascript"></script>
<script src='/javascripts/mapUtils.js'></script> -->

<script src="/javascripts/lib/easeljs.min.js" type="text/javascript"></script>
<script src="/javascripts/lib/tweenjs.min.js" type="text/javascript"></script>
<script src="/javascripts/lib/illuminated.js" type="text/javascript"></script>
<script src="/javascripts/lib/input.js" type="text/javascript"></script>
<script src='/javascripts/lib/jsonHelpers.js'></script>
<script src='/javascripts/preload.js'></script>
<script src='/javascripts/bindings.js'></script>
<!-- <script src='/javascripts/scripts.js'></script> -->
<script src='/javascripts/intervals.js'></script>
<script src='/javascripts/render.js'></script>
<script src='/javascripts/mapUtils.js'></script>
<script src='/javascripts/packets.js'></script>
<script src='/javascripts/leaderboard.js'></script>
<script src='/javascripts/models/bullet.js'></script>
<script src='/javascripts/models/crosshair.js'></script>
<script src='/javascripts/models/bloodEffect.js'></script>
<script src='/javascripts/models/progressbar.js'></script>
<script src='/javascripts/models/messages.js'></script>
<script src='/javascripts/models/collisionManager.js'></script>
<script src='/javascripts/models/item.js'></script>
<script src='/javascripts/models/player.js'></script>
<script src='/javascripts/util.js'></script>
<script src='/javascripts/light/light.js'></script>
<script src='/javascripts/light/lightingEngine.js'></script>
<!-- <script src='/assets/map.js'></script> -->
<script src="/socket.io/socket.io.js" type="text/javascript"></script>

<canvas id='viewport'></canvas>
<canvas id='buffer'></canvas>
<canvas id='lighting'></canvas>

<script>
    var debug = false;

    var FPS = 60
    var TILE_SIZE = 16;
    var MOVE_DISTANCE = 4;
    var CAMERA_WIDTH = 31;
    var CAMERA_HEIGHT = 31;
    var VIEW_DISTANCE = 150;
    var TILES_WIDE;
    var TILES_HIGH;

    var lastViewportRender = {x:-1,y:-1};
    var lastBufferRender = {x:-1, y:-1};
    var lastLightRender = {x:-1, y:-1}

    var solids = [];
    var light;
    var lighting;

    var me;
    var otherPlayer;
    var players = [];

    var camera = {x:0,y:0}

    var map = {}
    var tilesThatBlockView = [2]

    var INPUT_U = function() { return input.keyboard[87] || input.keyboard[38] ? true:false };
    var INPUT_L = function() { return input.keyboard[65] || input.keyboard[37] ? true:false };
    var INPUT_D = function() { return input.keyboard[83] || input.keyboard[40] ? true:false };
    var INPUT_R = function() { return input.keyboard[68] || input.keyboard[39] ? true:false };

    var tileset;
    var assets = {
        'tileset': '/assets/images/tileset.png',
        'fed'   :  '/assets/images/fed.png',
    }

    $(function() {

        // terrain
        base_canvas = document.createElement("canvas");
        base_canvas.width = (CAMERA_WIDTH+1) * TILE_SIZE
        base_canvas.height = (CAMERA_HEIGHT+1) * TILE_SIZE
        base_ctx = base_canvas.getContext('2d')

        // lighting
        lighting_canvas = document.createElement("canvas");
        lighting_canvas.width = (CAMERA_WIDTH+1) * TILE_SIZE
        lighting_canvas.height = (CAMERA_HEIGHT+1) * TILE_SIZE
        lighting_ctx = lighting_canvas.getContext('2d')

        // viewport
        viewport_canvas = document.getElementById("viewport");
        viewport_canvas.width = CAMERA_WIDTH * TILE_SIZE
        viewport_canvas.height = CAMERA_HEIGHT * TILE_SIZE
        viewport_ctx = viewport_canvas.getContext('2d')

        // easeljs stage
        stage_canvas = document.createElement("canvas");
        stage_canvas.width = (CAMERA_WIDTH+1) * TILE_SIZE
        stage_canvas.height = (CAMERA_HEIGHT+1) * TILE_SIZE
        stage_ctx = stage_canvas.getContext('2d')

        stage_stage = new createjs.Stage(stage_canvas);
        stage_stage.autoClear = true;

        createjs.Ticker.setFPS(FPS);

        light = new illuminated.Lamp({ position: new illuminated.Vec2(0, 0),distance: VIEW_DISTANCE});
        lighting = new illuminated.Lighting({ light: light, objects: []});

        loadMap('level1', function(arr) {

            map.data = arr;
            preload(assets,function() {
                createjs.Ticker.addListener(window);

                me = new Player()
                me.x = 300;
                me.y = 300;

                otherPlayer = new Player({x:350,y:300, alpha:.5})
                players = [me, otherPlayer]

                stage_stage.addChild(me.bitmap)
                stage_stage.addChild(otherPlayer.bitmap)

            });
        })

        $(viewport_canvas).bind('mousemove', function(e) {
            var deltaX = (e.clientX) - viewport_canvas.width/2
            var deltaY = (e.clientY) - viewport_canvas.height/2
            me.bitmap.rotation = Math.atan2(deltaY, deltaX) / Math.PI * 180 - 90;
            renderViewport(me.x, me.y, true)
        });

    });

    function loadMap(map, callback) {
        $.get('/assets/maps/' + map + '.json', function(data) {
            var arr = [];
            for(var y = 0;y < data.height; y++) {
                arr[y] = []
                for(var x = 0; x< data.width; x++) {
                    arr[y][x] = data.layers[0].data[y * data.height + x]
                }
            }
            callback(arr)
        })
    }

    function handleInput() {
        if(INPUT_U()) { me.move(me.x, me.y - MOVE_DISTANCE) }
        if(INPUT_L()) { me.move(me.x - MOVE_DISTANCE, me.y) }
        if(INPUT_D()) { me.move(me.x, me.y + MOVE_DISTANCE) }
        if(INPUT_R()) { me.move(me.x + MOVE_DISTANCE, me.y) }
        camera.x = me.x-CAMERA_WIDTH * TILE_SIZE/2;
        camera.y = me.y-CAMERA_HEIGHT * TILE_SIZE/2;
    }

    function renderBuffer(x,y) {

        if(x==lastBufferRender.x && y==lastBufferRender.y) return;

        var cameraX = Math.floor(x/TILE_SIZE) - Math.floor((CAMERA_WIDTH)/2);
        var cameraY = Math.floor(y/TILE_SIZE) - Math.floor((CAMERA_HEIGHT)/2);

        var walls = [];

        for(var yy=0;yy<CAMERA_HEIGHT+1;yy++) {
            for(var xx=0;xx<CAMERA_WIDTH+1;xx++) {

                var tile = map.data[yy + cameraY][xx + cameraX];
                base_ctx.drawImage(assets.tileset.img,TILE_SIZE*(tile-1),0,TILE_SIZE,TILE_SIZE,xx*TILE_SIZE,yy*TILE_SIZE,TILE_SIZE,TILE_SIZE)

                if($.inArray(tile, tilesThatBlockView) >-1) walls[walls.length] = {x:xx, y:yy}

            }
        }

        lastBufferRender = {x:x, y:y}

        return walls;

    }

    function renderViewport(x,y,force) {
        var force = force || false
        if(x == lastViewportRender.x && y == lastViewportRender.y && !force) return false;

        // move me to account for offset
        me.bitmap.x = x%TILE_SIZE + (TILE_SIZE * CAMERA_WIDTH / 2)
        me.bitmap.y = y%TILE_SIZE + (TILE_SIZE * CAMERA_HEIGHT / 2)

        // move other players based to account for the camera and mod offsets
        $.each(players, function() {
            if(this==me) return
            this.bitmap.x = this.x + x%TILE_SIZE - camera.x;
            this.bitmap.y = this.y + y%TILE_SIZE - camera.y;
        });

        stage_stage.update()

        viewport_ctx.drawImage(base_canvas,x%TILE_SIZE,y%TILE_SIZE, CAMERA_WIDTH * TILE_SIZE, CAMERA_HEIGHT * TILE_SIZE, 0, 0, CAMERA_WIDTH * TILE_SIZE, CAMERA_HEIGHT * TILE_SIZE)
        viewport_ctx.drawImage(stage_canvas,x%TILE_SIZE,y%TILE_SIZE, CAMERA_WIDTH * TILE_SIZE, CAMERA_HEIGHT * TILE_SIZE, 0, 0, CAMERA_WIDTH * TILE_SIZE, CAMERA_HEIGHT * TILE_SIZE)
        viewport_ctx.drawImage(lighting_canvas,x%TILE_SIZE,y%TILE_SIZE, CAMERA_WIDTH * TILE_SIZE, CAMERA_HEIGHT * TILE_SIZE, 0, 0, CAMERA_WIDTH * TILE_SIZE, CAMERA_HEIGHT * TILE_SIZE)

        lastViewportRender = {x:x,y:y}
        return true;
    }

    function processSolids(solids) {
        var objects = []
        for(var w = 0; w< solids.length; w++) {
            objects[objects.length] = new illuminated.RectangleObject({
                topleft: new illuminated.Vec2(solids[w].x * TILE_SIZE, solids[w].y * TILE_SIZE),
                bottomright: new illuminated.Vec2(solids[w].x * TILE_SIZE + TILE_SIZE, solids[w].y * TILE_SIZE + TILE_SIZE)
            });
        }
        return objects;
    }

    function processLights(solids,x,y) {
        if(!me) return

        if(lastLightRender.x == x && lastLightRender.y ==y) return false;

        light.position.x = (CAMERA_WIDTH+1) * TILE_SIZE / 2 + x
        light.position.y = (CAMERA_HEIGHT+1) * TILE_SIZE / 2 + y

        lighting.objects = solids;

        var touching = lighting.compute((CAMERA_WIDTH+1) * TILE_SIZE, (CAMERA_HEIGHT+1) * TILE_SIZE);

        lighting_ctx.fillStyle = 'rgba(0,0,0,1)'
        lighting_ctx.globalCompositeOperation = 'source-over'
        lighting_ctx.fillRect(0,0,(CAMERA_WIDTH+1) * TILE_SIZE, (CAMERA_HEIGHT+1) * TILE_SIZE)

        lighting_ctx.fillStyle="rgba(0,0,0,.1)";
        lighting_ctx.globalCompositeOperation = 'destination-out'
        lighting_ctx.fillRect(0,0,(CAMERA_WIDTH+1) * TILE_SIZE, (CAMERA_HEIGHT+1) * TILE_SIZE)

        lighting.render(lighting_ctx);
        lighting.render(lighting_ctx);

        lastLightRender = {x:x,y:y}
        lighting_ctx.globalCompositeOperation = 'lighter'
        $.each(solids,function() {
            lighting_ctx.clearRect(this.topleft.x, this.topleft.y,16,16)
            var dist = distance({x:this.topleft.x-x%16, y:this.topleft.y-y%16}, {x:CAMERA_WIDTH * TILE_SIZE / 2,y:CAMERA_HEIGHT * TILE_SIZE / 2}) / VIEW_DISTANCE
            lighting_ctx.fillStyle="rgba(0,0,0," + Math.min(.9,dist) + ")";
            lighting_ctx.fillRect(this.topleft.x, this.topleft.y,16,16)
        });

    }

    function Player(options) {
        var options = options || {}
        var spriteSheet = new createjs.SpriteSheet({
            images: [assets.fed.img],
            frames: {width:32, height:32, regX:16, regY:16},
            animations: {
                alive:{frames:[0], frequency:5}
            }
        });

        this.bitmap = new createjs.BitmapAnimation(spriteSheet);
        this.bitmap.gotoAndPlay('alive')
        this.bitmap.scaleX = .75
        this.bitmap.scaleY = .75
        this.bitmap.alpha = options.alpha || 1;
        this.x = options.x || CAMERA_WIDTH*TILE_SIZE/2 + TILE_SIZE /2;
        this.y = options.y || CAMERA_HEIGHT*TILE_SIZE/2 + TILE_SIZE /2;

        this.move = function(x, y) {
            this.x = x;
            this.y = y;
            // this.bitmap.x = this.bitmap.baseX = x;
            // this.bitmap.y = this.bitmap.baseY = y;
            // this.light.position = x
            // this.light.position = y;
        }

        return this;

    }



    window.tick = function() {
        if(!me) return
        handleInput();
        var walls = renderBuffer(me.x, me.y);
        if(walls) solids = processSolids(walls) || solids;
        processLights(solids, me.x%TILE_SIZE, me.y%TILE_SIZE)
        renderViewport(me.x, me.y)
    }

</script>